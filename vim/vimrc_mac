"execute pathogen#infect()
"execute pathogen#helptags()


set nocompatible              " 不要使用vi的键盘模式，而是vim自己的
filetype off                  " required 
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required Plugin 'VundleVim/Vundle.vim' 
" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
Plugin 'ascenator/L9', {'name': 'newL9'}

"#=============My Own Plugin===================
Bundle 'majutsushi/tagbar'

Plugin 'Raimondi/delimitMate'  "括号自动补全

Plugin 'scrooloose/nerdtree'  "nerdtree树形结构

Plugin 'scrooloose/syntastic' "语法错误检查

"MarkDown插件
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

Plugin 'iamcco/mathjax-support-for-mkdp'
Plugin 'iamcco/markdown-preview.vim'  "Markdown实时预览
"go
Plugin 'fatih/vim-go'

Plugin 'Valloric/YouCompleteMe'

Plugin 'terryma/vim-multiple-cursors'

Plugin 'fholgado/minibufexpl.vim'  "多窗口编辑

"Plugin 'suan/vim-instant-markdown'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required为特定文件类型载入相关缩进文件
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line")

syntax on
colorscheme molokai 
set t_Co=256
set guioptions=egmrti
set gfn=Monospace\ 10
let g:molokai_original = 1


"cterm 表示为原生vim设置样式，设置为NONE表示可以自定义设置。
"ctermbg 设置终端vim的背景色
"ctermfg 设置终端vim的前景色
"guifg=#8080ff guibg=fg gui=reverse gui模式下
highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0
hi Visual ctermfg=lightblue ctermbg=fg cterm=reverse

" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,gb2312,gbk,gb18030
set fileformat=unix
set langmenu=zh_CN.UTF-8


"行列高亮显示 cterm 表示为原生vim设置样式，设置为NONE表示可以自定义设置。
"ctermbg 设置终端vim的背景色, ctermfg 设置终端vim的前景色, guibg 和 guifg 分别是设置gvim的背景色和前景色
"set cursorline   
"hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white   
set cursorcolumn
"highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
:hi MatchParen ctermbg=black ctermfg=green

"粘贴时，忽略自动缩进的影响,在插入粘贴模式下进行粘贴
"map <F10> :set paste<cr>
""<map> <F11> :set nopaste<CR>
:set pastetoggle=<F10>  "激活/取消paste模式
""nmap <leader>pp :set paste


"关闭缓存文件
set nobackup 
set noswapfile 

set nocompatible "使用vim自己的键盘模式

"set expandtab | :%ret! 4 每个tab用4个空格代替
"
"制表符和空格键设置
set tabstop=4  "表示一个tab的空格长度，默认是8
set softtabstop=4  "表示编辑模式下退格键的回退长度
set shiftwidth=4   "每一级的缩进，一般和softtabstop一样
set expandtab  "当设置成expandtab时,缩进用空格来表示,noexpandtab则是用制表符表示一个缩进
set nofoldenable "关闭自动折叠


" set mapleader
"let mapleader = " "
let mapleader = ","

"own basiz set
nnoremap <silent> <leader>w :w!<cr> 
nnoremap <silent> <leader>q :wq<cr> 
nnoremap <silent> <leader>cd :cd %:p:h<cr>:pwd<cr>

"inoremap $1 ()<esc>i
inoremap ( ()<esc>i
inoremap [ []<esc>i
inoremap { {}<esc>i
inoremap " ""<esc>i
inoremap < <><esc>i
au FileType go inoremap { {}<esc>i<CR><esc>O

vnoremap ( <esc>`>a)<esc>`<i(<esc> 
vnoremap [ <esc>`>a]<esc>`<i[<esc> 
vnoremap { <esc>`>a}<esc>`<i{<esc> 
vnoremap $" <esc>`>a"<esc>`<i"<esc> 
vnoremap ' <esc>`>a'<esc>`<i'<esc> 
vnoremap < <esc>`>a><esc>`<i<<esc> 

command! Json :execute '%!python -m json.tool'
"windowns
"command! JsonFormat :execute '%!python -m json.tool'  
"  \ | :execute '%!python -c "import
"  re,sys;chr=__builtins__.__dict__.get(\"unichr\",
"  chr);sys.stdout.write(re.sub(r\"\\u[0-9a-f]{4}\", lambda x: chr(int(\"0x\"
"  + x.group(0)[2:], 16)).encode(\"utf-8\"), sys.stdin.read()))"'  
"  \ | :set ft=javascript  
"  \ | :1


"set 7 lines to the cursor - when moveing vertically use j/k
",上下滚动，始终在中间
set so=7

"always show current position
set ruler

"a buffer becomes hidden when it is abondoned
set hid

"configure backspace so it acts as it should act
"indent: 如果用了:set indent,:set ai 等自动缩进，想用退格键将字段缩进的删掉，必须设置这个选项。否则不响应。 
"eol:如果插入模式下在行开头，想通过退格键合并两行，需要设置eol。 
"start：要想删除此次插入前的输入，需设置这个
set backspace=eol,start,indent
set whichwrap+=<,>h,l

"let g:rehash256 = 1
set nu "显示行号
set hlsearch "查询高亮
set incsearch "逐字高亮
"set ignorecase "忽略大小写
"查询串中有大写，则为区分大小写，否则不区分，\c{char}不区分 {char}\C区分
set smartcase "自动识别大小写，
set gcr=a:block-blinkon0 "关闭光标闪烁

"df从insert切换到normal
:inoremap df <esc>

" 关闭<esc>键
":inoremap <esc> <nop>

"注释
:autocmd FileType java nnoremap <buffer> <leader>/ I//<esc>
:autocmd FileType go nnoremap <buffer> <leader>/ I//<esc>

"自定义高亮显示 to times这两个关键字
"你首先要用syntax keyword或相关命令(我们待会会提到)，定义一组语法类型。然后你要把这组类型链接到高亮组(highlighting groups)。一个高亮组是你在配色方案里定义的东西，比如"函数名应该是蓝色的"。
"syntax keyword potionKeyword to times
"highlight link potionKeyword Keyword

"查找选中文本，* 命令的原有功能被覆盖了, # 命令也被重新定义为反向
"查找选中的文本了
xnoremap * : <C-u> call <SID> VSetSearch() <CR>/<C-R>=@/<CR><CR>
xnoremap # : <C-u> call <SID> VSetSearch() <CR>?<C-R>=@/<CR><CR>

function! s:VSetSearch()
let temp = @s
norm! gv"sy
let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
let @s = temp
endfunction

"窗口移动
nmap J <C-w>j  
nmap H <C-w>h  
nmap K <C-w>k  
nmap L <C-w>l  
nmap W <C-w>w

"移动光标到括号后
inoremap ,, <Esc>la

"用特殊的符号来代表tab制表符
"set list
"set listchars=tab:▸\ ,eol:¬
"set lcs=tab:\|\ ,nbsp:%,trail:-  "匹配行首tab为|，行尾空格为-

"Tagbar的快捷键
nnoremap <F8> :TagbarToggle<CR>  
let g:tagbar_ctags_bin='ctags'            "ctags程序的路径
let g:tagbar_width=30                    "窗口宽度的设置
"autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen() "如果是c语言的程序的话，tagbar自动开启
"
"#--------------NERDTREE配置------------
let NERDTreeWinPos='left'
let NERDTreeWinSize=30
noremap <F2> :NERDTreeToggle<CR>
let NERDTreeDirArrows=1 "目录箭头 1 显示箭头  0传统+-|号
let NERDTreeShowBookmarks=1 "显示书签
let NERDTreeWinPos ="left"       "将NERDTree的窗口设置在gvim窗口的左边   
"let NERDTreeQuitOnOpen = 1  "close nerdtree when open a new file
"autocmd bufenter * if (winnr("") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif)


"#----------Syntastic------------#
set statusline=%F%m%r%h%w%=(%{&ff}/%y)\ (line\ %l\/%L,\ col\ %c)\  "状态栏设置
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0



"#---------------MarkDown-------------#
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:vim_markdown_folding_disabled = 1 "设置不做代码折叠
let g:vim_markdown_frontmatter=1 "设置支持yaml语法
let g:vim_markdown_math=1
let g:table_mode_corner="|"

nnoremap <silent> <leader>mk :MarkdownPreview<cr>
inoremap <silent> <leader>mk :MarkdownPreview<cr>
nnoremap <silent> <leader>dn :StopMarkdownPreview<cr>
inoremap <silent> <leader>dn :StopMarkdownPreview<cr>

"使用goolge浏览器自带的markdown浏览控件
"nnoremap <leader>ch :update<Bar>silent !google-chrome %:p<CR>

" path to the chrome or the command to open chrome()
let g:mkdp_path_to_chrome="/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"

" set to 1, the vim will open the preview window once enter the markdowni file
let g:mkdp_auto_start = 0

" set to 1, the vim will auto open preview window when you edit the markdown file
let g:mkdp_auto_open = 0

"set to 1, the vim will auto close current preview window when change from markdown buffer to another buffe
let g:mkdp_auto_close = 1

" set to 1, the vim will just refresh markdown when save the buffer or leave from insert mode, default 0 is auto refresh markdown as you edit or move the cursor
let g:mkdp_refresh_slow = 0

 "set to 1, the MarkdownPreview command can be use for all files,by default it just can be use in markdown file
let g:mkdp_command_for_global = 0


" golang 配置
" vim-go custom mappings
au FileType go nnoremap <leader>s <Plug>(go-implements)
au FileType go nnoremap <leader>i <Plug>(go-info)
au FileType go nnoremap <leader>gd <Plug>(go-doc)
au FileType go nnoremap <leader>gv <Plug>(go-doc-vertical)
au FileType go nnoremap <leader>r <Plug>(go-run)
au FileType go nnoremap <leader>b <Plug>(go-build)
au FileType go nnoremap <leader>t <Plug>(go-test)
au FileType go nnoremap <leader>c <Plug>(go-coverage)
"au FileType go nmap <leader>ds <Plug>(go-def-split)
"au FileType go nmap <eader>dv <Plug>(go-def-vertical)
au FileType go nnoremap <leader>dt <Plug>(go-def-tab)
au FileType go nnoremap <leader>e <Plug>(go-rename)

"vim-go setting
let g:go_fmt_command = "goimports"


"vim_multi_cursor
" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

"--------minibufexpl----------

nnoremap <silent> <leader>b1 :b1<cr>
nnoremap <silent> <leader>b2 :b2<cr>
nnoremap <silent> <leader>b3 :b3<cr>
nnoremap <silent> <leader>b4 :b4<cr>
nnoremap <silent> <leader>b5 :b5<cr>
nnoremap <silent> <leader>b6 :b6<cr>
nnoremap <silent> <leader>b7 :b7<cr>
nnoremap <silent> <leader>b8 :b8<cr>
nnoremap <silent> <leader>b8 :b9<cr>
"这个设置保证在打开0个以上的文件是最高限制都是有用的，
"如果不加就会出现打开一个文件的时候Filexplorer再次变小，当打开多个文件的时候再次变大
let g:miniBufExplorerMoreThanOne=0
let g:bufExplorerMaxHeight=30                "taglist的最高限制
let g:miniBufExplMapWindowNavArrows = 1       "按左右箭头切换文件标签，再按enter键即可打开选择的文件标签
"let g:miniBufExplMapCTabSwitchBufs = 1       "按Tab键也可达到切换效果
"let g:miniBufExplMapWindowNavVim = 1
"let g:miniBufExplModSelTarget = 1


"minibuf
